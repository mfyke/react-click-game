{"version":3,"sources":["components/Stats.js","components/Header.js","components/Character.js","components/App.js","serviceWorker.js","index.js"],"names":["Stats","props","react_default","a","createElement","className","score","highScore","Header","components_Stats","Character","onClick","handleClick","id","alt","src","link","App","state","characters","name","clicked","console","log","_this","char","indexOf","setState","prevState","Object","toConsumableArray","concat","shuffle","carr","i","length","j","Math","floor","random","temp","_this2","this","components_Header","map","c","index","components_Character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2901abab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Stats = (props) => {\r\n\treturn (\r\n\t\t<p className=\"text-right\">Score: {props.score} | Top Score: {props.highScore}</p>\r\n\t)\r\n}\r\n\r\nexport default Stats;","import React from 'react';\r\n\r\nimport Stats from './Stats'\r\n\r\nconst Header = (props) => {\r\n\treturn(\r\n\t\t<div className=\"jumbotron bg-info\">\r\n\t\t\t<h1 className=\"text-center\">React Click Game</h1>\r\n\t\t\t<p className=\"text-center\">Click an image to begin, but do not click the same image twice!</p>\r\n\t\t\t<Stats score={props.score} highScore={props.highScore} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Character = (props) => {\r\n\treturn(\t\r\n\t\t\t<button onClick={() => props.handleClick(props.id)} className=\"char btn btn-outline-dark\">\r\n\t\t\t\t<img className=\"rounded-circle img-thumbnail\" alt=\"chars\" src={props.link} />\r\n\t\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default Character;","import React, { Component } from 'react';\r\n\r\nimport Header from './Header';\r\nimport Character from './Character';\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tscore: 0,\r\n\t\thighScore: 0,\r\n\t\tcharacters: [\r\n\t\t\t{\r\n\t\t\t\tname: \"Ana\",\r\n\t\t\t\tid: 1,\r\n\t\t\t\tlink: './assets/images/ana.png'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Ashe\",\r\n\t\t\t\tid:2,\r\n\t\t\t\tlink: \"./assets/images/bobbyashe.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Doomfist\",\r\n\t\t\t\tid:3,\r\n\t\t\t\tlink: \"./assets/images/dfist.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Genji\",\r\n\t\t\t\tid: 4,\r\n\t\t\t\tlink: \"./assets/images/genji.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Hammond\",\r\n\t\t\t\tid: 5,\r\n\t\t\t\tlink: \"./assets/images/hammy.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Junkrat\",\r\n\t\t\t\tid: 6,\r\n\t\t\t\tlink: \"./assets/images/jrat.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"McCree\",\r\n\t\t\t\tid: 7,\r\n\t\t\t\tlink: \"./assets/images/mccree.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Pharah\",\r\n\t\t\t\tid: 8,\r\n\t\t\t\tlink: \"./assets/images/pharah.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Reaper\",\r\n\t\t\t\tid: 9,\r\n\t\t\t\tlink: \"./assets/images/reaper.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Soldier 76\",\r\n\t\t\t\tid: 10,\r\n\t\t\t\tlink: \"./assets/images/soldier.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Zarya\",\r\n\t\t\t\tid: 11,\r\n\t\t\t\tlink: \"./assets/images/zarya.png\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"Zenyatta\",\r\n\t\t\t\tid: 12,\r\n\t\t\t\tlink: \"./assets/images/zen.png\"\r\n\t\t\t}\r\n\t\t],\r\n\t\tclicked: []\r\n\t};\r\n\r\n\thandleClick = (id) => {\r\n\t\tconsole.log(this.state.char);\r\n\t\tif(this.state.clicked.indexOf(id)<0) {\r\n\t\t\tif (this.state.score>=this.state.highScore) {\r\n\t\t\t\tthis.setState(prevState=>({\r\n\t\t\t\t\tscore: prevState.score+=1,\r\n\t\t\t\t\thighScore: prevState.highScore+=1,\r\n\t\t\t\t\tclicked: [...this.state.clicked, id]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setState(prevState=>({\r\n\t\t\t\t\tscore: prevState.score+=1,\r\n\t\t\t\t\tclicked: [...this.state.clicked, id]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.setState({\r\n\t\t\t\tscore: 0,\r\n\t\t\t\tclicked: []\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tshuffle = (carr) => {\r\n\t\tfor (let i =0; i< carr.length;i++) {\r\n\t\t\tlet j = i + Math.floor(Math.random() * (carr.length-i));\r\n\r\n\t\t\tlet temp = carr[j];\r\n\t\t\tcarr[j] = carr[i];\r\n\t\t\tcarr[i] = temp;\r\n\t\t}\r\n\t\treturn carr;\r\n\t}\r\n\r\n\trender() {\r\n\t\tthis.shuffle(this.state.characters);\r\n\t\t// console.log(randArr);\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<Header score={this.state.score} highScore={this.state.highScore} />\r\n\t\t\t\t{/* Characters list */}\r\n\t\t\t\t<div className=\"text-center col-md-10 offset-md-1\">\r\n\t\t\t\t\t{this.state.characters.map((c, index) => \r\n\t\t\t\t\t\t<Character \r\n\t\t\t\t\t\tlink={c.link}\r\n\t\t\t\t\t\tkey={c.id}\r\n\t\t\t\t\t\tid={c.id}\r\n\t\t\t\t\t\tclicked={c.clicked}\r\n\t\t\t\t\t\tname={c.name}\r\n\t\t\t\t\t\thandleClick={this.handleClick}\r\n\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}